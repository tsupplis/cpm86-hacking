;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

 
            title   'PCEINIT - Start CP/M'

include pce.a86

            cseg
            mov     cx,ds
            mov     es,cx
            call    cls
            call    print_cpm_ver
            mov     cx,0Ch
            int     0E0h
            cmp     ax,1430h
            jz      wrg_os
            cmp     ax,1431h
            jz      wrg_os
            sub     ax,1462h
            ja      hw_end
            call    print_hw
            jmp     hw_end
wrg_os:
            lea	    si, msg_wrg_os
            call	print_str
            call    quit
hw_end:
            lea     si, msg_rtc
            call    print_str

include pceclock.a86

cls:
            push    ax
            push    bx
            push    cx
            mov     dx,27
            mov     cl,02h            
            int     0E0h    
            mov     dx,'E'
            mov     cl,02h            
            int     0E0h    
            pop     cx
            pop     bx
            pop     ax
            ret

print_hw:
            push    ax
            push    bx
            push    cx
            push    dx
            push    es
            push    si
            lea     si, msg_hw_hdr
            call    print_str  
            lea     si, msg_hw_mem
            call    print_str  
            int     12h
            mov     bx,10
            call    print_uint16
            lea     si, msg_hw_kb
            call    print_str  
            lea     si, msg_hw_amem
            call    print_str  
            mov     dx,offset mcb
            mov     cl,35h
            int     0E0h
            mov     ax, word ptr mlen
            mov     cl,6
            shr     ax, cl
            inc     ax
            inc     ax
            mov     bx,10
            call    print_uint16
            lea     si, msg_hw_kb
            call    print_str  
            lea     si, msg_hw_87
            call    print_str  
            int     11h
 	        add	    ax,0040h
	        and	    ax,0fff3h
            push    ax
            and     al,2
            jz      no_87
            lea     si, msg_hw_yes
            jmp     done_87
no_87:
            lea     si, msg_hw_no
done_87:
            call    print_str  
            lea     si, msg_hw_flp
            call    print_str  
            pop     ax
            push    ax
            xor     ah,ah
            mov     cl,06h
            shr     al,cl
            and     al,07h
            mov     bx,10
            call    print_uint16
            lea     si, msg_nl
            call    print_str  
            lea     si, msg_hw_dsk
            call    print_str  
            call    disk_count
            mov     bx,10
            call    print_uint16
            lea     si, msg_nl
            call    print_str  
            lea     si, msg_hw_par
            call    print_str  
            pop     ax
            push    ax
            mov     cl,0Eh
            shr     ax,cl
            and     al,03h
            mov     bx,10
            call    print_uint16
            lea     si, msg_nl
            call    print_str  
            lea     si, msg_hw_ser
            call    print_str  
            pop     ax
            mov     cl,09h
            shr     ax,cl
            and     al,07h
            mov     bx,10
            call    print_uint16
            lea     si, msg_nl
            call    print_str  
            pop     si
            pop     es
            pop     dx
            pop     cx
            pop     bx
            pop     ax  
            ret

print_cpm_ver:
            push    si
            push    ax
            push    bx
            push    cx
            push    dx
            mov     cx,0Ch
            int     0E0h
            push    ax
            cmp     ah,15h
            jz      print_ver_mpm
            cmp     ax,1430h
            jz      print_ver_ccpm
            cmp     ax,1431h
            jz      print_ver_ccpm
            cmp     ax,1466h
            jae     print_ver_mdos
            cmp     ah,14h
            jz      print_ver_cdos
            cmp     ax,1041h
            jz      print_ver_dosp
            cmp     ax,22h
            jz      print_ver_cpm
            lea     si, msg_cpm86
            call    print_str  
            jmp     print_ver_base
print_ver_cpm:
            lea     si, msg_pccpm86
            call    print_str  
            jmp     print_ver_base
print_ver_dosp:
            lea     si, msg_dosp
            call    print_str  
            jmp     print_os_ver
print_ver_mpm:
            lea     si, msg_mpm86
            call    print_str  
            jmp     print_os_ver
print_ver_cdos:
            lea     si, msg_cdos
            call    print_str  
            jmp     print_os_ver
print_ver_mdos:
            lea     si, msg_mdos
            call    print_str  
            jmp     print_os_ver
print_ver_ccpm:
            lea     si, msg_ccpm86
            call    print_str  
            jmp     print_os_ver
print_os_ver:
            mov     cx,0A3h
            int     0E0h
            mov     ax,bx
            xor     ah,ah
            mov     bx,10
            mov     dl,al
            mov     cl,4
            shr     al, cl
            and     al,0Fh
            call    print_uint16
            mov     al,'.'
            call    print_char
            mov     al,dl
            xor     ah,ah
            and     al,0Fh
            call    print_uint16
            lea     si, msg_ver_sep
            call    print_str  
            jmp     print_ver_base
print_ver_base:
            pop     ax
            lea     si, msg_ver_hdr
            call    print_str  
            xor     ah,ah
            mov     bx,10
            mov     dl,al
            mov     cl,4
            shr     al, cl
            and     al,0Fh
            call    print_uint16
            mov     al,'.'
            call    print_char
            mov     al,dl
            xor     ah,ah
            and     al,0Fh
            call    print_uint16
            lea     si, msg_nl
            call    print_str  
print_ver_end:
            pop     dx
            pop     cx
            pop     bx
            pop     ax  
            pop     si
            ret

include pcelib.a86
include tinylib.a86
include baselib.a86

             dseg

mcb          dw     0
mlen         dw     65534
mext         db     0
month_siz    db     31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
month_day    dw     000,031,059,090,120,151,181,212,243,273,304,334
msg_wrg_os   db     'Not supported by this operating system.',13,10,0
msg_notpce   db     'Not running under PCE ...',13,10,0
msg_hookerr  db     'No PCE RTC clock ...',13,10,0
msg_rtc      db     'Date now: ',0
msg_cpm86   db      'CP/M-86, ',0
msg_pccpm86 db      'CP/M-86 1.1, ',0
msg_ccpm86  db      'Concurrent CP/M-86 ',0
msg_mpm86   db      'MP/M-86 ',0
msg_cdos    db      'Concurrent DOS ',0
msg_mdos    db      'Multiuser DOS ',0
msg_dosp    db      'DOSPLUS ',0
msg_ver_hdr db      'BDOS ',0
msg_ver_sep db      ', ',0
msg_hw_hdr   db     'Hardware Configuration: ',13,10,0
msg_hw_mem   db     ' - System Memory: ',0
msg_hw_amem  db     ' - Available Memory: ',0
msg_hw_87    db     ' - Math Coprocessor: ',0
msg_hw_flp   db     ' - Floppy Drive(s): ',0
msg_hw_dsk   db     ' - Hard Disk(s): ',0
msg_hw_par   db     ' - Parallel Port(s): ',0
msg_hw_ser   db     ' - Serial Port(s): ',0
msg_hw_yes   db     'Yes',13,10,0
msg_hw_no    db     'No',13,10,0
msg_hw_kb    db     'Kb',13,10,0
msg_nl       db     13,10,0
tm_buffer    rs     256
stamp_year   rw     1
stamp_hours  rb     1
stamp_mins   rb     1
stamp_secs   rb     1
             db     0

             end
